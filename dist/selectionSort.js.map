{"version":3,"sources":["../selectionSort.js"],"names":["generatorRandomArray","n","rangeL","rangeR","randomArray","i","num","Math","random","push","toFixed","printResult","arr","join","testSort","sortName","sortFn","array","startTime","Date","getTime","endTime","console","log","bubleSort","length","flag","j","q","temp","selectionSort","minIndex","insertSort","copy","mergeSort","__mergeSort","l","r","mid","floor","merge","aux","slice","k","quickSort","__quickSort","p","__partition","randomIndex","v","MaxHeap","data","count","item","shiftup","max","shiftdown","parseFloat","heapSort","maxHeap","value","insert","unshift","extractMax","heapSort2"],"mappings":"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","file":"selectionSort.js","sourcesContent":["/**\n * Created by eleven on 17-6-26.\n */\n// import utils from \"./ioUtils.js\";\n\n//随机生成指定范围和数量的数组\nlet generatorRandomArray  =  (n, rangeL, rangeR) =>  {\n    let randomArray = [];\n    for(let i = 0; i < n; i++){\n        let num = Math.random()*(rangeR-rangeL+1)+rangeL;\n        randomArray.push(num.toFixed(2));\n    }\n    return randomArray;\n}\n//打印输出\nlet printResult = (arr) => {\n    return arr.join(\" \");\n\n}\n//测试算法性能\nlet testSort = function (sortName,sortFn, array) {\n    let startTime = (new Date()).getTime();\n    sortFn(array);\n    let endTime = (new Date()).getTime();\n\n    console.log(`${sortName}:${endTime-startTime}ms`)\n}\n\nlet array = generatorRandomArray(10, 1,1000);\n//console.log(printResult(array));\n\n//冒泡排序\nlet bubleSort = function (array) {\n    for (let i =0; i < array.length; i++){\n        let flag = true;\n        for (let j =0; j < array.length - i; j++){\n            if(array[j] > array[j+q]){\n                let temp = array[j];\n                array[j] = array[j+1];\n                array[j+1] = temp;\n                flag = false;\n            }\n\n        }\n        if(flag){\n            break;\n        }\n    }\n}\n\n//选择排序\nlet  selectionSort = function (array) {\n    for (let i = 0; i < array.length; i++){\n        let minIndex = i;\n        for (let j = i + 1; j < array.length; j++){\n            if (array[j] < array[minIndex]){\n                minIndex = j;\n            }\n        }\n        [array[i], array[minIndex]] = [array[minIndex], array[i]];\n    }\n    return array;\n}\n\n\n\n// console.log(\"after sort\", printResult(selectionSort(array)));\n//testSort('selectionSort', selectionSort, array);\n\n\n//插入排序\nlet insertSort = function (array) {\n    for (let i = 1; i < array.length; i++){\n        //要插入的副本\n        let copy = array[i];\n        //j表示要插入的位置\n        let j;\n        for(j = i; j > 0; j--){\n            if (copy < array[j-1]){\n                array[j] = array[j-1]\n            }else {\n                break;\n            }\n        }\n        array[j] = copy;\n    }\n    return array;\n}\n\n\n\n\n\n//归并排序（当n小到一定程序的时候，插入排序和归并排序性能要好）\nlet mergeSort = function (array) {\n    __mergeSort(array, 0, array.length-1);\n    return array;\n}\n\nfunction __mergeSort(array, l, r) {\n    if (l >= r)\n        return;\n    //对于小数组使用插入排序\n    // if ((l - r) < 15){\n    //     insertSort(array)\n    // }\n    let mid = Math.floor((l+r)/2);\n    __mergeSort(array, l, mid);\n    __mergeSort(array, mid+1, r);\n    //近乎有序数据\n    if (array[mid] > array[mid+1]){\n        merge(array, l, mid, r);\n    }\n}\n\nfunction merge(array, l, mid, r) {\n    let aux = array.slice(l, r + 1);\n    let i = l, j = mid +1;\n    for (let k = l; k <= r ; k++){\n\n        if (i > mid) {\n            array[k] = aux[j-l];\n            j++;\n        }else if (j > r){\n            array[k] = aux[i-l];\n            i++;\n        }else if (aux[i-l] < aux[j-l]) {\n            array[k] = aux[i-l];\n            i++;\n        }else {\n            array[k] = aux[j-l];\n            j++;\n        }\n    }\n\n}\n\n\n//快速排序\nlet quickSort = function (array) {\n    __quickSort(array, 0, array.length -1);\n    return array;\n}\n\nfunction __quickSort(array, l, r) {\n\n    if (l >= r)\n        return;\n    //插入排序优化\n    // if((l-r)<15){\n    //     insertSort(array);\n    //     return;\n    // }\n    let p = __partition(array, l, r);\n    __quickSort(array, l, p-1);\n    __quickSort(array, p+1, r);\n}\n\nfunction __partition(array, l, r) {\n    //i指小于array[l]的部分最后索引，j指大于array[l]的部分最后索引\n    // 自己根据思想写的\n    // let j,i = l;\n    // for(let k = l + 1; k <= r; k++){\n    //     if (array[k] < array[l]){\n    //         [array[k],array[j+1]] = [array[j+1], array[k]];\n    //         j++;\n    //     }else {\n    //         array[i+1] = array[k];\n    //         i++;\n    //     }\n    // }\n    //更加简便的写法\n    let j = l;\n    let randomIndex = Math.random()*(r-l+1)+l;\n    [array[l], array[randomIndex]]\n    let v = array[l];\n    for(let i = l +1; i<=r; i++){\n        if (array[i] < v){\n            [array[i],array[j+1]] = [array[j+1], array[i]];\n            j++;\n        }\n    }\n    [array[l], array[j]] = [array[j],array[l]];\n    return j;\n    \n}\n\n\n//堆排序\nclass MaxHeap{\n    constructor(){\n        this.data = [];\n        this.count = 0;\n    }\n\n    insert(item) {\n        this.data[this.count+1] = item;\n        this.count++;\n        this.shiftup(this.count);\n\n    }\n\n    extractMax(){\n        let max = this.data[1];\n        this.data[1] = this.data[this.count];\n        this.count--;\n        this.shiftdown(1);\n        return max;\n    }\n\n    isEmpty(){\n        return this.count === 0;\n    }\n\n\n    shiftup(count){\n        while (count>1 && parseFloat(this.data[Math.floor(count/2)]) < parseFloat(this.data[count])){\n            [this.data[Math.floor(count/2)],this.data[count]] = [this.data[count],this.data[Math.floor(count/2)]];\n            count = Math.floor(count/2);\n        }\n\n    }\n\n    shiftdown(k){\n        while (2*k < this.count){\n            let j = 2*k; //在本轮循环中，data[k]和data[j]交换位置\n            if ( j + 1 <= this.count && parseFloat(this.data[j+1]) > parseFloat(this.data[j])){\n                j++;\n            }\n            if (parseFloat(this.data[k]) > parseFloat(this.data[j])){\n                break;\n            }\n            [this.data[k],this.data[j]] = [this.data[j],this.data[k]];\n            k =  j;\n\n        }\n\n    }\n}\n\n// for(let i=0; i<10; i++){\n//     maxHeap.insert((Math.random()*100).toFixed(2));\n// }\n// console.log(maxHeap.data);\n// printResult(maxHeap.data);\n\nlet heapSort = function (array) {\n    let maxHeap = new MaxHeap();\n    for(value of array){\n        maxHeap.insert(value);\n    }\n    let length = array.length;\n    array =[];\n    for (let i = 0; i < length; i++){\n        array.unshift(maxHeap.extractMax());\n    }\n    return array;\n}\n\nlet heapSort2 = function (array) {\n    let maxHeap = new MaxHeap();\n    for(let i = 0; i < array.length; i++){\n        maxHeap.data[i+1] = array[i];\n    }\n    maxHeap.count = array.length;\n    for( let j = Math.floor(maxHeap.count/2); j > 1; j--){\n        maxHeap.shiftdown(j);\n    }\n\n    let length = array.length;\n    array =[];\n    for (let i = 0; i < length; i++){\n        array.unshift(maxHeap.extractMax());\n    }\n    return array;\n\n}\n\nconsole.log(\"after sort\", printResult(heapSort2(array)));\n//testSort('selectionSort', selectionSort, Object.assign([],array));\n//testSort('insertSort', insertSort, Object.assign([],array));\n//testSort('mergeSort', mergeSort, Object.assign([],array));\n//testSort('quckSort', quickSort, Object.assign([],array));"]}
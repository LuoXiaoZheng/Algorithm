{"version":3,"sources":["../BST.js"],"names":["Node","key","value","left","right","BST","root","_insert","node","_contain","_contian","_search","_preOrder","console","log","_inOrder","_postOrder","_levelOrder","arr","push","length","currentNode","shift","_minimum","_maximum","_removeMin","rightNode","_removeMax","leftNode","_remove","successor","Object","assign","mininum"],"mappings":"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","file":"BST.js","sourcesContent":["/**\n * Created by eleven on 2017/9/20.\n */\nclass Node{\n    constructor(key, value, left, right){\n        this.key = key;\n        this.value = value;\n        this.left = left;\n        this.right = right;\n    }\n\n}\n//二分搜索树\nclass BST{\n    constructor(){\n        this.root = null;\n    }\n\n    insert(key, value){\n        this.root = _insert(this.root, key, value);\n    }\n\n    //插入\n    _insert(node, key, value){\n        if(!node){\n            return new Node(key,value,null,null)\n        }\n        if(key === node.key){\n            node.value = value;\n        }else if(key > node.key){\n            node.right = _insert(node.right, key, value);\n        }else {\n            node.left = _insert(node.left, key, value);\n        }\n        return node;\n    }\n\n    //是否包含key\n    contain(key){\n        return _contain(this.root,key);\n    }\n\n    _contain(node, key){\n        if(!node){\n            return false;\n        }\n        if(key === node.key){\n            return true;\n        }else if(key > node.key){\n           return _contian(node.right,key);\n        }else {\n            return _contian(node.left,key);\n        }\n    }\n\n    //返回对应key的value\n    search(key){\n        return _search(this.root,key);\n    }\n\n    _search(node, key){\n        if (!node){\n            return null;\n        }\n\n        if (key === node.key){\n            return node.value;\n        }else if (key > node.key){\n            return _search(node.right,key);\n        }else{\n            return _search(node.left, key)\n        }\n    }\n\n    //前序遍历\n    preOrder(){\n        _preOrder(this.root);\n    }\n\n    _preOrder(node){\n        if (!node){\n            console.log(node.key);\n            _preOrder(node.left);\n            _preOrder(node.right);\n        }\n    }\n\n    //中序遍历\n    inOrder() {\n        _inOrder(this.root);\n    }\n\n    _inOrder(node){\n        if (!node){\n            _inOrder(node.left);\n            console.log(node.key);\n            _inOrder(node.right);\n        }\n    }\n\n    //后序遍历\n    postOrder(){\n        _postOrder(this.root);\n    }\n\n    _postOrder(node){\n        _postOrder(node.left);\n        _postOrder(node.right);\n        console.log(node.key);\n    }\n\n    //二分搜索树广度优先遍历（层序遍历）\n    levelOrder(){\n        _levelOrder(this.root);\n    }\n\n    _levelOrder(node){\n        //队列\n        let arr = [];\n        if(!node){\n            arr.push(node);\n            while (arr.length !== 0){\n                var currentNode = arr.shift();\n                console.log(currentNode.key);\n                if(!currentNode.left){\n                    arr.push(currentNode.left);\n                }\n                if (!currentNode.right){\n                    arr.push(currentNode.right)\n                }\n            }\n        }\n    }\n\n    //返回二分搜索树中的最小键值\n    minimum(){\n        if(this.root){\n            let node = _minimum(this.root);\n            return node.key;\n        }\n        return null;\n    }\n\n    _minimum(node){\n        if (!node.left){\n            return node;\n        }\n        return _minimum(node.left);\n    }\n\n    //返回二分搜索树中最大键值\n    maximum(){\n        if(this.root){\n            let node = _maximum(this.root)\n            return node.key;\n        }\n        return null;\n    }\n\n    //以node为根节点的的二叉搜索树，返回最大键值得节点\n    _maximum(node){\n        if(!node.right){\n            return node;\n        }\n        return _maximum(node.right);\n    }\n\n    removeMin(){\n        if(this.root){\n            _removeMin(this.root);\n        }\n    }\n\n    //删除以node为根节点的二叉搜索树的最小键值\n    //返回删除节点后的新的二叉树的根\n    _removeMin(node){\n        if (!node.left){\n            let rightNode = node.right;\n            node = null;\n            return rightNode;\n        }\n\n        node.left =  _removeMin(node.left);\n        return node;\n    }\n\n    removeMax(){\n        if(this.root){\n            _removeMax(this.root);\n        }\n    }\n\n    _removeMax(node){\n        if(!node.right){\n            let leftNode = node.left;\n            node = null;\n            return leftNode;\n        }\n\n        node.right =_removeMax(node.right);\n        return node;\n    }\n\n    remove(key){\n        _remove(this.root,key);\n    }\n\n    _remove(node, key){\n        if(!node){\n            return null;\n        }\n        if(key < node.key){\n            node.left = _remove(node.left, key);\n            return node;\n        }else if(key > node.key){\n            node.right = _remove(node.right, key);\n        }else{\n            if(!node.left){\n                let rightNode = node.right;\n                node = null;\n                return rightNode;\n            }\n\n            if(!node.right){\n                let leftNode = node.left;\n                node = null;\n                return leftNode;\n            }\n\n            let successor = Object.assign(mininum(node.right));\n            successor.left = node.left;\n            successor.right = _removeMin(node.right);\n            node = null;\n            return successor;\n        }\n    }\n}"]}